// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createContactStmt, err = db.PrepareContext(ctx, createContact); err != nil {
		return nil, fmt.Errorf("error preparing query CreateContact: %w", err)
	}
	if q.deleteContactStmt, err = db.PrepareContext(ctx, deleteContact); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteContact: %w", err)
	}
	if q.getCommonConditionByCodeStmt, err = db.PrepareContext(ctx, getCommonConditionByCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetCommonConditionByCode: %w", err)
	}
	if q.getCommonConditionByIdStmt, err = db.PrepareContext(ctx, getCommonConditionById); err != nil {
		return nil, fmt.Errorf("error preparing query GetCommonConditionById: %w", err)
	}
	if q.getContactByIdStmt, err = db.PrepareContext(ctx, getContactById); err != nil {
		return nil, fmt.Errorf("error preparing query GetContactById: %w", err)
	}
	if q.listCommonConditionsStmt, err = db.PrepareContext(ctx, listCommonConditions); err != nil {
		return nil, fmt.Errorf("error preparing query ListCommonConditions: %w", err)
	}
	if q.listCommonCulpritsForConditionStmt, err = db.PrepareContext(ctx, listCommonCulpritsForCondition); err != nil {
		return nil, fmt.Errorf("error preparing query ListCommonCulpritsForCondition: %w", err)
	}
	if q.listCommonSymptomsForConditionStmt, err = db.PrepareContext(ctx, listCommonSymptomsForCondition); err != nil {
		return nil, fmt.Errorf("error preparing query ListCommonSymptomsForCondition: %w", err)
	}
	if q.listContactsStmt, err = db.PrepareContext(ctx, listContacts); err != nil {
		return nil, fmt.Errorf("error preparing query ListContacts: %w", err)
	}
	if q.updateContactStmt, err = db.PrepareContext(ctx, updateContact); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateContact: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createContactStmt != nil {
		if cerr := q.createContactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createContactStmt: %w", cerr)
		}
	}
	if q.deleteContactStmt != nil {
		if cerr := q.deleteContactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteContactStmt: %w", cerr)
		}
	}
	if q.getCommonConditionByCodeStmt != nil {
		if cerr := q.getCommonConditionByCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommonConditionByCodeStmt: %w", cerr)
		}
	}
	if q.getCommonConditionByIdStmt != nil {
		if cerr := q.getCommonConditionByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommonConditionByIdStmt: %w", cerr)
		}
	}
	if q.getContactByIdStmt != nil {
		if cerr := q.getContactByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getContactByIdStmt: %w", cerr)
		}
	}
	if q.listCommonConditionsStmt != nil {
		if cerr := q.listCommonConditionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCommonConditionsStmt: %w", cerr)
		}
	}
	if q.listCommonCulpritsForConditionStmt != nil {
		if cerr := q.listCommonCulpritsForConditionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCommonCulpritsForConditionStmt: %w", cerr)
		}
	}
	if q.listCommonSymptomsForConditionStmt != nil {
		if cerr := q.listCommonSymptomsForConditionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCommonSymptomsForConditionStmt: %w", cerr)
		}
	}
	if q.listContactsStmt != nil {
		if cerr := q.listContactsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listContactsStmt: %w", cerr)
		}
	}
	if q.updateContactStmt != nil {
		if cerr := q.updateContactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateContactStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                 DBTX
	tx                                 *sql.Tx
	createContactStmt                  *sql.Stmt
	deleteContactStmt                  *sql.Stmt
	getCommonConditionByCodeStmt       *sql.Stmt
	getCommonConditionByIdStmt         *sql.Stmt
	getContactByIdStmt                 *sql.Stmt
	listCommonConditionsStmt           *sql.Stmt
	listCommonCulpritsForConditionStmt *sql.Stmt
	listCommonSymptomsForConditionStmt *sql.Stmt
	listContactsStmt                   *sql.Stmt
	updateContactStmt                  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		createContactStmt:                  q.createContactStmt,
		deleteContactStmt:                  q.deleteContactStmt,
		getCommonConditionByCodeStmt:       q.getCommonConditionByCodeStmt,
		getCommonConditionByIdStmt:         q.getCommonConditionByIdStmt,
		getContactByIdStmt:                 q.getContactByIdStmt,
		listCommonConditionsStmt:           q.listCommonConditionsStmt,
		listCommonCulpritsForConditionStmt: q.listCommonCulpritsForConditionStmt,
		listCommonSymptomsForConditionStmt: q.listCommonSymptomsForConditionStmt,
		listContactsStmt:                   q.listContactsStmt,
		updateContactStmt:                  q.updateContactStmt,
	}
}
